import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'net.minecraftforge.gradle'
    id 'org.parchmentmc.librarian.forgegradle'
    id 'org.ajoberstar.grgit'
    id 'com.matthewprenger.cursegradle'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'org.sonarqube'
    id 'com.modrinth.minotaur'
}

idea {
    module {
        inheritOutputDirs = true

        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            excludeDirs.add(new File(projectDir, excludeDirName))
        }
    }
}

sourceSets {
    main {
        resources {
            include '**/**'
            srcDirs += 'src/datagen/generated'
            exclude '.cache'
        }
    }

    test {
        resources.srcDirs = []
        compileClasspath += main.output
        runtimeClasspath += main.output
    }

    datagen {
        java.srcDirs = ['src/datagen/java']
        resources.srcDirs = ['src/datagen/resources']
        compileClasspath += project.sourceSets.main.output
    }
}

configurations {
    testImplementation.extendsFrom(implementation)
    datagenImplementation.extendsFrom(implementation)
    testCompileOnly.extendsFrom(compileOnly)
    datagenCompileOnly.extendsFrom(compileOnly)
    datagenRuntimeOnly.extendsFrom(runtimeOnly)

}

ext {
    versionProperties = ["version"                : version,
                         "mc_version"             : "[${minecraftVersion},)",
                         "forge_version"          : "[${forgeMajor}.${forgeMinor}.$forgePatch,)",
                         "loader_version"         : "[${forgeMajor},)",
    ]
    jsonPatterns = ["**/*.json", "**/*.mcmeta"]
}

def replaceResources = tasks.register("replaceResources", Copy) {

    println versionProperties
    //For whatever reason this will not get set in the ext block
    versionProperties["version"] = version

    it.outputs.upToDateWhen { false }
    def modsToml = copySpec {
        from(sourceSets.main.resources) {
            include "META-INF/mods.toml"
            expand versionProperties
        }
    }
    // Copy it into the build dir
    it.with modsToml
    it.into "$buildDir/resources/main/"
    // If IntelliJ's output dir exists, copy it there as well
    if (new File("$rootDir/out/production/ExNihiloSequentia.main/").exists()) {
        // Note: This copies it into the correct place, but it still doesn't have the IntelliJ
        // run work by default because of incorrect MOD_CLASSES getting generated.
        // probably related to us setting inheritOutputDirs
        copy {
            with modsToml
            into "$rootDir/out/production/ExNihiloSequentia.main/"
        }
    }
    // If Eclipse's output dir exists, copy it there as well
    if (new File("$rootDir/bin/main/").exists()) {
        copy {
            with modsToml
            into "$rootDir/bin/main/"
        }
    }
}

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion

    runs {
        client {
            workingDirectory file("run")
            // This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                // Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                // Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                // Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods.create(project.name).source(sourceSets.main)
        }

        server {
            workingDirectory file("runserver")
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('forge_force_ansi')) {
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods.create(project.name).source(sourceSets.main)
        }

        data {
            workingDirectory file("run")
            environment 'target', 'fmluserdevdata'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('forge_force_ansi')) {
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            args '--all',
                    '--output', file('src/datagen/generated/'),
                    '--mod', project.name,
                    '--existing', file('src/main/resources/')

            mods.create(project.name).sources((SourceSet []) [sourceSets.main, sourceSets.datagen])
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeMajor}.${forgeMinor}.${forgePatch}"
}

test {
    useJUnitPlatform()
}

processResources {
    setupProcessResources(processResources, replaceResources, project.name)
}

def setupProcessResources(ProcessResources process, TaskProvider<Task> replaceResources, String logoTitle) {
    process.duplicatesStrategy(DuplicatesStrategy.FAIL)
    process.exclude('META-INF/mods.toml')
    process.from(projectDir) { include "logo-${logoTitle}.png" }
    process.configure { finalizedBy(replaceResources) }
    process.doLast {
        fileTree(dir: process.getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

classes.configure {
    dependsOn(replaceResources)
}

def getManifestAttributes(String title) {
    return [
            "Specification-Title"     : title,
            "Specification-Vendor"    : "NovaMachina",
            "Specification-Version"   : "${archivesBaseName}-${version}",
            "Implementation-Title"    : title,
            "Implementation-Version"  : "${archivesBaseName}-${version}",
            "Implementation-Vendor"   : "NovaMachina",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ]
}

jar {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    from([sourceSets.main.output])
    manifest.attributes(getManifestAttributes(projectFullName))
    afterEvaluate { finalizedBy reobfJar }
}

tasks.withType(JavaCompile).configureEach({
    it.options.encoding = 'UTF-8'
})

compileJava {
    options.compilerArgs << "-Acrafttweaker.processor.document.output_directory=${file('docsOut')}"
    options.getGeneratedSourceOutputDirectory().set(file("src/datagen/resources/"))
}

artifacts {
    archives jar
}

reobf {
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

// Minimize/optimize all png files, requires optipng on the PATH
// Credits: BrainStone
void minimizePNGFile(File file) {
    long size = file.length()
    exec {
        executable "optipng"
        args "-q", "-o7", "-zm1-9", "-strip", "all", file
    }
    long newSize = file.length()
    if (newSize < size) {
        System.out.format("Reduced File size of %s from %d bytes to %d bytes (reduced by %.2f%%)\n",
                file, size, newSize, ((double) (size - newSize)) / ((double) size) * 100.0)
    }
}

task optimizePng {
    def pngPatterns = ["**/*.png"]
    doLast {
        // Ensure the logo is minimized (we add this file to each jar)
        minimizePNGFile(file("${projectDir}/logo.png"))
        // Minimize any PNGs in the source sets
        def sourceSets = [sourceSets.main, sourceSets.thermal, sourceSets.ae, sourceSets.mekanism, sourceSets.tinkers]
        for (def sourceSet : sourceSets) {
            for (dir in sourceSet.resources.srcDirs) {
                fileTree(dir: dir, includes: pngPatterns).each { minimizePNGFile(it) }
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    // Disable Gradle 7 module metadata generation as it does not play nicely with FG
    enabled = false
}

//publishing {
//    publications { PublicationContainer publicationContainer ->
//        publicationContainer.register(project.name, MavenPublication) { MavenPublication publication ->
//            publication.from((SoftwareComponent) components.java)
//            publication.groupId = project.group
//            publication.version = project.version
//            publication.artifactId = System.getenv("MAVEN_ARTIFACT") ?: project.archivesBaseName
//            publication.artifacts = [jar]
//            publication.pom {
//                name.set(projectFullName)
//                packaging = 'jar'
//                description.set(projectDescription)
//                url.set(projectCurseForgeURL)
//                scm {
//                    url.set(projectGitURL)
//                }
//                issueManagement {
//                    system.set('github')
//                    url.set(projectIssuesURL)
//                }
//                licenses {
//                    license {
//                        name.set(projectLicense)
//                        distribution.set('repo')
//                    }
//                }
//                withXml {
//                    NodeList dependencies = asNode().dependencies
//                    NodeList allDeps = dependencies.'*'
//
//                    // Remove forge deps
//                    allDeps.<Node> findAll() { Node el ->
//                        el.artifactId.text() == 'forge' && el.groupId.text() == 'net.minecraftforge'
//                    }.forEach() { Node el ->
//                        el.parent().remove(el)
//                    }
//                    //remove ForgeGradle's mapped suffix from versions & set as optional so anyone else doesn't inherit them
//                    allDeps.<Node> findAll() { Node el ->
//                        el.version.text().contains('_mapped_')
//                    }.each { Node el ->
//                        el.version.each { Node version ->
//                            def versionText = version.text()
//                            version.setValue(versionText.substring(0, versionText.indexOf('_mapped_')))
//                        }
//                        el.appendNode('optional', true)
//                    }
//                }
//            }
//        }
//    }
//    repositories {
//        maven {
//            url = "https://repo.jacob-williams.me/repository/internal/"
//            credentials {
//                username = System.getenv("NEXUS_USERNAME")
//                password = System.getenv("NEXUS_PASSWORD")
//            }
//        }
//    }
//}

tasks.curseforge {
    dependsOn jar
}

def resolvedChangelog = null

def changeLogResolver = { ->
    if (resolvedChangelog != null) {
        return resolvedChangelog
    }
    def generatedChangelog = "Unable to generate changelog :("
    def currentCommit = System.getenv("GIT_COMMIT")
    def prevCommit = System.getenv("GIT_PREVIOUS_SUCCESSFUL_COMMIT") ?: System.getenv("GIT_PREVIOUS_COMMIT")

    if (currentCommit != null && prevCommit != null) {
        generatedChangelog = ""
        grgit.log {
            range(prevCommit, currentCommit)
        }.reverse().each { commit ->
            // Use full message rather than short message to get any new lines, and trim it so that any trailing new lines
            // get removed so that we don't end up with extra spaces
            String message = commit.fullMessage.trim()
            if (!message.startsWith("Merge branch") && !message.startsWith("Merge pull request")) {
                //Ignore Merges and PR Merges
                message = message.replaceAll("#(\\d+)", { match ->// turn issues/prs into links (github currently supports prs being linked as issues)
                    return "<a href=\"${projectIssuesURL}/${match[1]}\">${match[0]}</a>"
                } as String).replaceAll("\\n", "<br>&emsp;")
                // convert new lines that are part of a commit message into actual new lines and a tab
                if (generatedChangelog != "") {
                    // If this isn't the first commit prepend an extra newline
                    generatedChangelog += "<br>"
                }
                generatedChangelog += "<a href=\"${projectIssuesURL}/${commit.id}\">${commit.getAbbreviatedId()}</a> - ${message}"
            }
        }
        println "Changelog generated"
    }

    def releaseNotesFile = project.file("docs/release_${version}.html")
    if (releaseNotesFile.exists()) {
        // Add any version specific changelog stuff
        def releaseNotes = releaseNotesFile.getText()
        generatedChangelog = "$releaseNotes<br> $generatedChangelog"
    }

    if (curseReleaseType == "alpha") {
        // Add a warning at the top about what an alpha build means
        generatedChangelog = "Warning: ${projectFullName} is currently in alpha, and is not recommended for widespread use in modpacks. There are likely to be game breaking bugs, " +
                "and updating from one alpha to the next may cause various ${projectFullName} blocks and items to disappear/void their contents. While we will try to not have this " +
                "happen/keep it to a minimum make sure to make backups. <br> $generatedChangelog"
    }
    if (curseReleaseType == "beta") {
        // Add a warning at the top about what an beta build means
        generatedChangelog = "Warning: ${projectFullName} is currently in beta, and is not recommended for widespread use in modpacks. There may be game breaking bugs, " +
                "and updating from one beta to the next may cause various ${projectFullName} blocks and items to disappear/void their contents. " +
                "While this is unlikely to happen in a beta, make sure to make backups. <br> $generatedChangelog"
    }
    resolvedChangelog = generatedChangelog
    return generatedChangelog
}

if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforgeKey')) {
    println "Enabling Curseforge config"
    curseforge {
        apiKey = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforgeKey")

        options {
            debug = !shouldDeploy.toBoolean()
        }

        project {
            id = curseForgeId
            changelogType = "html"
            changelog = changeLogResolver
            // A file can also be set using: changelog = file('changelog.txt')
            releaseType = curseReleaseType
            mainArtifact(jar) {
                relations {
                    optionalDependencies.split(',').each {
                        optionalDependency it
                    }
                    requiredDependencies.split(',').each {
                        requiredDependency it
                    }
                }
            }
            addGameVersion minecraftVersion
        }
    }
}