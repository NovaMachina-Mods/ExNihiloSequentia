import net.darkhax.curseforgegradle.TaskPublishCurseForge
import net.darkhax.curseforgegradle.UploadArtifact

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.57'
    id 'org.checkerframework' version '0.6.30'
    id 'io.freefair.lombok' version '8.3'
//    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.diffplug.spotless' version '6.8.0'
    id 'net.darkhax.curseforgegradle' version '1.1.16'
    id 'com.modrinth.minotaur' version '2.8.3'
}

String basicVersion = "${mod_version}-build." + (System.getenv("GITHUB_RUN_NUMBER") ?: "SNAPSHOT")
version = "${minecraft_version}-${basicVersion}" + (basicVersion.endsWith('SNAPSHOT') ? '' : (release_type != 'release' ? "-${release_type}" : ''))
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal();
    maven {
        name 'NovaMachina Mods - Release'
        url 'https://dl.cloudsmith.io/public/novamachina-mods/release/maven/'
        content {
            includeGroup 'novamachina.novacore'
            includeGroup 'novamachina.exnihilosequentia'
            includeGroup 'novamachina.exnihilothermal'
            includeGroup 'novamachina.exnihilomekanism'
            includeGroup 'novamachina.exnihiloae'
            includeGroup 'novamachina.exnihilotinkers'
        }
        mavenContent {
            releasesOnly()
        }
    }
    maven {
        name 'NovaMachina Mods - Snapshot'
        url 'https://dl.cloudsmith.io/public/novamachina-mods/snapshot/maven/'
        content {
            includeGroup 'novamachina.novacore'
            includeGroup 'novamachina.exnihilosequentia'
            includeGroup 'novamachina.exnihilothermal'
            includeGroup 'novamachina.exnihilomekanism'
            includeGroup 'novamachina.exnihiloae'
            includeGroup 'novamachina.exnihilotinkers'
        }
        mavenContent {
            snapshotsOnly()
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    if (findProject(':NovaCore') != null) {
        implementation(project(':NovaCore')) {
            transitive = false
        }
    } else {
        implementation "novamachina.novacore:novacore:${nova_core_version}"
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version           : minecraft_version,
            minecraft_version_range     : minecraft_version_range,
            neo_version                 : neo_version,
            neo_version_range           : neo_version_range,
            loader_version_range        : loader_version_range,
            mod_id                      : mod_id,
            mod_name                    : mod_name,
            mod_license                 : mod_license,
            mod_version                 : mod_version,
            mod_authors                 : mod_authors,
            mod_description             : mod_description,
            pack_format_number          : pack_format_number,
            git_url                     : github_url,
            curseforge_url              : curseforge_url,
            novacore_version_range      : novacore_version_range,
            modrinth_project_id         : modrinth_project_id
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId project.group
            artifactId System.getenv("MAVEN_ARTIFACT") ?: mod_id
            version project.version
            artifact jar

            pom {
                name = mod_name
                packaging = 'jar'
                description = mod_description
                url = curseforge_url
                scm {
                    url = "${github_url}.git"
                }
                issueManagement {
                    system = 'github'
                    url = "${github_url}/issues"
                }
                licenses {
                    license {
                        name = mod_license
                        distribution = 'repo'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "cloudsmith"
            url = "https://maven.cloudsmith.io/novamachina-mods/release/"
            def releaseRepoUrl = "https://maven.cloudsmith.io/novamachina-mods/release/"
            def snapshotRepoUrl = "https://maven.cloudsmith.io/novamachina-mods/snapshot/"
            url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : releaseRepoUrl
            credentials {
//                username = System.getenv("MAVEN_USERNAME")
                username = 'jacob-williams'
//                password = System.getenv("MAVEN_PASSWORD")
                password = '132a9075bdffa3b7b6918f74f620e74c7047b0b9'
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

processResources.dependsOn(compileJava)

if(!System.getenv('CI')) {
    apply plugin: com.diffplug.gradle.spotless.SpotlessPlugin
    spotless {
//        ratchetFrom 'origin/1.20'
        format 'misc', {
            target '*.gradle', '*.md', '.gitignore'

            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
        java {
            removeUnusedImports()
            trimTrailingWhitespace()
            googleJavaFormat()
        }
    }
}

task installLocalGitHook(type: Copy) {
    group = "management"
    description = "Installs git hooks into their proper location"

    String hooksDir = '.git/hooks'
    if(file("${projectDir}/.git").isFile()) {
        String fileContents = new File(projectDir, '.git').text
        hooksDir = "${fileContents.split(": ")[1].dropRight(1)}/hooks"
    }

    from new File(projectDir, 'scripts/pre-commit')
    into { new File(hooksDir)}
    fileMode 0775
}

build.dependsOn installLocalGitHook

task publishCurseForge(type: TaskPublishCurseForge) {
    group = "publishing"
    description = "Publishes project to CurseForge"

    apiToken = System.getenv("CURSEFORGE_KEY")
    String projectId = curseforge_id

    UploadArtifact mainFile = upload(projectId, jar)
    mainFile.releaseType = release_type
    mainFile.changelogType = 'markdown'
    mainFile.changelog = (file('CHANGELOG.md').exists() ? file('CHANGELOG.md').text : "No changelog was specified.")
    mainFile.addModLoader("NeoForge")
    mainFile.addGameVersion(minecraft_version)

    mainFile.addRequirement('novacore')
    mainFile.addOptional('jade')
    mainFile.addOptional('jei')
    mainFile.addOptional('the-one-probe')
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinth_project_id

    uploadFile = jar
    versionType = release_type
    gameVersions = [minecraft_version]
    loaders = ["neoforge"]
    changelog = (file('CHANGELOG.md').exists() ? file('CHANGELOG.md').text : DEFAULT_CHANGELOG)
    dependencies {
        required.project('novacore')
        optional.project('jade')
        optional.project('jei')
        optional.project('the-one-probe')
    }
}
