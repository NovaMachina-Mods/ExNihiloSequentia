import net.darkhax.curseforgegradle.TaskPublishCurseForge
import net.darkhax.curseforgegradle.UploadArtifact

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.checkerframework' version '0.6.30'
    id 'io.freefair.lombok' version '8.3'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.diffplug.spotless' version '6.8.0'
    id 'net.darkhax.curseforgegradle' version '1.1.16'
    id 'com.modrinth.minotaur' version '2.8.3'
}

String basicVersion = "${mod_version}-build." + (System.getenv("GITHUB_RUN_NUMBER") ?: "SNAPSHOT")
version = "${minecraft_version}-${basicVersion}" + (basicVersion.endsWith('SNAPSHOT') ? '' : (release_type != 'release' ? "-${release_type}" : ''))
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'CraftTweaker'
        url "https://maven.blamejared.com"
        content {
            includeGroup 'com.blamejared.crafttweaker'
            includeGroup 'org.openzen.zencode'
            includeGroup 'mezz.jei'
        }
    }
    maven {
        name 'k-4u'
        url 'https://maven.k-4u.nl/'
        content {
            includeGroup 'mcjty.theoneprobe'
        }
    }
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url 'https://maven.architectury.dev'
        content {
            includeGroup 'dev.architectury'
        }
    }
    maven {
        url 'https://maven.saps.dev/minecraft'
        content {
            includeGroup 'dev.latvian.mods'
        }
    }
    maven {
        url "https://jitpack.io"
        content {
            includeGroup "com.github.llamalad7.mixinextras"
        }
    }
    maven {
        name 'NovaMachina Mods - Release'
        url 'https://dl.cloudsmith.io/public/novamachina-mods/release/maven/'
        content {
            includeGroup 'novamachina.novacore'
            includeGroup 'novamachina.exnihilosequentia'
            includeGroup 'novamachina.exnihilothermal'
            includeGroup 'novamachina.exnihilomekanism'
            includeGroup 'novamachina.exnihiloae'
            includeGroup 'novamachina.exnihilotinkers'
        }
        mavenContent {
            releasesOnly()
        }
    }
    maven {
        name 'NovaMachina Mods - Snapshot'
        url 'https://dl.cloudsmith.io/public/novamachina-mods/snapshot/maven/'
        content {
            includeGroup 'novamachina.novacore'
            includeGroup 'novamachina.exnihilosequentia'
            includeGroup 'novamachina.exnihilothermal'
            includeGroup 'novamachina.exnihilomekanism'
            includeGroup 'novamachina.exnihiloae'
            includeGroup 'novamachina.exnihilotinkers'
        }
        mavenContent {
            snapshotsOnly()
        }
    }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"

    if (findProject(':NovaCore') != null) {
        implementation(project(':NovaCore')) {
            transitive = false
        }
    } else {
        implementation fg.deobf (project.dependencies.create("novamachina.novacore:novacore:${nova_core_version}") {
            transitive = false
        })
    }

    if(project.hasProperty("jei_version")) {
        compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
        implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    }

    if(project.hasProperty("top_version")) {
        compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${minecraft_version}-${top_version}:api") {
            transitive = false
        }
        runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${minecraft_version}-${top_version}") {
            transitive = false
        }
    }

    if(project.hasProperty("jade_id")) {
        compileOnly fg.deobf("curse.maven:jade-api-324717:${jade_api_id}")
//        runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_id}")
    }

    if(project.hasProperty("crafttweaker_version")) {
        implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${minecraft_version}:${crafttweaker_version}")
        annotationProcessor 'com.blamejared.crafttweaker:Crafttweaker_Annotation_Processors:3.0.0.10'
        annotationProcessor "net.neoforged:forge:${minecraft_version}-${neo_version}"
        annotationProcessor "com.blamejared.crafttweaker:CraftTweaker-forge-${minecraft_version}:${crafttweaker_version}"
    }

    if(project.hasProperty("kubejs_version")) {
        implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
        implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
        implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version           : minecraft_version,
            minecraft_version_range     : minecraft_version_range,
            neo_version                 : neo_version,
            neo_version_range           : neo_version_range,
            loader_version_range        : loader_version_range,
            mod_id                      : mod_id,
            mod_name                    : mod_name,
            mod_license                 : mod_license,
            mod_version                 : mod_version,
            mod_authors                 : mod_authors,
            mod_description             : mod_description,
            pack_format_number          : pack_format_number,
            git_url                     : github_url,
            curseforge_url              : curseforge_url,
            crafttweaker_version_range  : "[14.0.12,)",
            jei_version_range           : "[15.2.0.25,)",
            kubejs_version_range        : "[0.0.0,)",
            modrinth_project_id         : modrinth_project_id
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId project.group
            artifactId System.getenv("MAVEN_ARTIFACT") ?: mod_id
            version project.version
            artifact jar

            pom {
                name = mod_name
                packaging = 'jar'
                description = mod_description
                url = curseforge_url
                scm {
                    url = "${github_url}.git"
                }
                issueManagement {
                    system = 'github'
                    url = "${github_url}/issues"
                }
                licenses {
                    license {
                        name = mod_license
                        distribution = 'repo'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "cloudsmith"
            url = "https://maven.cloudsmith.io/novamachina-mods/release/"
            def releaseRepoUrl = "https://maven.cloudsmith.io/novamachina-mods/release/"
            def snapshotRepoUrl = "https://maven.cloudsmith.io/novamachina-mods/snapshot/"
            url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : releaseRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

processResources.dependsOn(compileJava)
compileJava {
    options.compilerArgs << "-Acrafttweaker.processor.document.output_directory=${file('docsOut')}"
    options.getGeneratedSourceOutputDirectory().set(file("src/main/resources/"))
}

if(!System.getenv('CI')) {
    apply plugin: com.diffplug.gradle.spotless.SpotlessPlugin
    spotless {
//        ratchetFrom 'origin/1.20'
        format 'misc', {
            target '*.gradle', '*.md', '.gitignore'

            trimTrailingWhitespace()
            indentWithSpaces(2)
            endWithNewline()
        }
        java {
            removeUnusedImports()
            trimTrailingWhitespace()
            googleJavaFormat()
        }
    }
}

task installLocalGitHook(type: Copy) {
    group = "management"
    description = "Installs git hooks into their proper location"

    String hooksDir = '.git/hooks'
    if(file("${projectDir}/.git").isFile()) {
        String fileContents = new File(projectDir, '.git').text
        hooksDir = "${fileContents.split(": ")[1].dropRight(1)}/hooks"
    }

    from new File(projectDir, 'scripts/pre-commit')
    into { new File(hooksDir)}
    fileMode 0775
}

build.dependsOn installLocalGitHook

task publishCurseForge(type: TaskPublishCurseForge) {
    group = "publishing"
    description = "Publishes project to CurseForge"

    apiToken = System.getenv("CURSEFORGE_KEY")
    String projectId = curseforge_id

    debugMode = true

    UploadArtifact mainFile = upload(projectId, jar)
    mainFile.releaseType = release_type
    mainFile.changelogType = 'markdown'
    mainFile.changelog = (file('CHANGELOG.md').exists() ? file('CHANGELOG.md').text : "No changelog was specified.")
    mainFile.addModLoader("NeoForge")
    mainFile.addGameVersion(minecraft_version)

    mainFile.addRequirement('novacore')
    mainFile.addOptional('jade')
    mainFile.addOptional('jei')
    mainFile.addOptional('the-one-probe')
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinth_project_id

    debugMode = true

    uploadFile = jar
    versionType = release_type
    gameVersions = [minecraft_version]
    loaders = ["neoforge"]
    changelog = (file('CHANGELOG.md').exists() ? file('CHANGELOG.md').text : DEFAULT_CHANGELOG)
    dependencies {
        required.project('novacore')
        optional.project('jade')
        optional.project('jei')
        optional.project('the-one-probe')
    }
}
